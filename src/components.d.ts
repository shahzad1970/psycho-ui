/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { UiAlign, UiButtonType, UiColor, UiElevation, UiInputType, UiLayoutType, UiOrientation, UiRounding, UiSize } from "./utils/ui-types";
import { UiIcons } from "./components/ui-icon/icon";
import { JsonDocsComponent, JsonDocsProp } from "./components/ui-playground/doc";
export namespace Components {
    interface UiApp {
        /**
          * Background color from the UI Color Palette
         */
        "background": UiColor;
        /**
          * Forground color from the UI Color Palette
         */
        "color": UiColor;
        /**
          * Absolute font size
         */
        "size": UiSize;
    }
    interface UiAppBody {
        /**
          * Background color from the UI Color Palette
         */
        "background": UiColor;
        /**
          * Forground color from the UI Color Palette
         */
        "color": UiColor;
        /**
          * Absolute font size
         */
        "size": UiSize;
    }
    interface UiAppHeader {
        /**
          * Background color from the UI Color Palette
         */
        "background": UiColor;
        /**
          * Forground color from the UI Color Palette
         */
        "color": UiColor;
        /**
          * Absolute font size
         */
        "size": UiSize;
        "src": string;
    }
    interface UiAppNavigation {
        /**
          * Background color from the UI Color Palette
         */
        "background": UiColor;
        /**
          * Forground color from the UI Color Palette
         */
        "color": UiColor;
        /**
          * Absolute font size
         */
        "size": UiSize;
        "toggle": () => Promise<void>;
    }
    interface UiButton {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description This Boolean attribute prevents the user from interacting with the ui-button.
         */
        "disabled": boolean;
        /**
          * @description URL where browser will navigate to once button is clicked. If href is provided then a click event will not be emitted and page will be redirect to the provided url.
         */
        "href": string;
        /**
          * @description Rounding button corners. <ul>    <li> Base : Adds slight corner rounding</li>    <li> fab : Intending to creating single icon round button</li>    <li> none : No rounding</li>    <li> pill : same rounding as fab except has more padding to left and right</li> </ul>
         */
        "round": UiRounding;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
        /**
          * @description Set button type from supported button types.
         */
        "type": UiButtonType;
    }
    interface UiCode {
        "language": 'xml' | 'java' | 'javascript' | 'typescript' | 'sql';
        "setCode": (code: any) => Promise<void>;
    }
    interface UiColumn {
        /**
          * @description Defines how each line is aligned within a flexbox/grid container.  It only applies if flex-wrap: wrap is present, and if there are multiple lines  of flexbox/grid items.
         */
        "alignContent": UiAlign;
        /**
          * @description Defines how flexbox items are aligned according to the cross axis, within a line  of a flexbox container.
         */
        "alignItems": UiAlign;
        /**
          * @description Defines how flexbox items are aligned according to the cross axis, within a line  of a flexbox container.
         */
        "alignSelf": UiAlign;
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Flex box flex, how much to streatch
         */
        "flex": string;
        /**
          * @description Flex box flex, how much to streatch
         */
        "gap": string;
        /**
          * @description Defines how each line is aligned within a flexbox/grid container. It only applies  if flex-wrap: wrap is present, and if there are multiple lines of  flexbox/grid items.
         */
        "justifyContent": UiAlign;
        /**
          * @description Flex box flex, how much to streatch
         */
        "margin": string;
        /**
          * @description Flex box flex, how much to streatch
         */
        "padding": string;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
    interface UiDocLinks {
    }
    interface UiGrid {
        /**
          * @description Defines how each line is aligned within a flexbox/grid container.  It only applies if flex-wrap: wrap is present, and if there are multiple lines  of flexbox/grid items.
         */
        "alignContent": UiAlign;
        /**
          * @description Defines how flexbox items are aligned according to the cross axis, within a line  of a flexbox container.
         */
        "alignItems": UiAlign;
        /**
          * @description Defines how flexbox items are aligned according to the cross axis, within a line  of a flexbox container.
         */
        "alignSelf": UiAlign;
        /**
          * @description Gap between each item of the grid
         */
        "autoFill": boolean;
        /**
          * @description Gap between each item of the grid
         */
        "autoFit": boolean;
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Amount of gap between the row items or column items;
         */
        "flex": string;
        /**
          * @description Gap between each item of the grid
         */
        "gap": string;
        /**
          * @description Defines how each line is aligned within a flexbox/grid container. It only applies  if flex-wrap: wrap is present, and if there are multiple lines of  flexbox/grid items.
         */
        "justifyContent": UiAlign;
        /**
          * @description Flex box flex, how much to streatch
         */
        "margin": string;
        /**
          * @description Flex box flex, how much to streatch
         */
        "padding": string;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
        /**
          * @description Gap between each item of the grid
         */
        "width": string;
    }
    interface UiHeading {
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "align": UiAlign;
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
        /**
          * @description Type provide two additional feature where heading can be underlined (bottom border) or outline which gives border around the heading.
         */
        "type": "underline" | "outline" | "base";
    }
    interface UiIcon {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Material design icons are used as part of this framework. Name of the icon can be between the tag or it can be sent in as an attribute. For example as attribute &lt;ui-icon icon="apps"&gt;&lt;/ui-icon&gt; or &lt;ui-icon&gt;apps&lt;/ui-icon&gt; In addition to this svg of an icon can be placed within the icon tag to create an svg icon.   <pre><ui-text color="danger">* CLICK NAME TO COPY TO CLIPBOARD * </ui-text></pre>
         */
        "icon": UiIcons;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
    interface UiInput {
        /**
          * @description Background color from the UI Color Palette
         */
        "background": UiColor;
        /**
          * @description Forground color from the UI Color Palette
         */
        "color": UiColor;
        /**
          * @description Type of input being requested
         */
        "orientation": UiOrientation;
        /**
          * @description Absolute font size
         */
        "size": UiSize;
        /**
          * @description Type of input being requested
         */
        "type": UiInputType;
        "value": any;
    }
    interface UiInputColor {
    }
    interface UiInputOption {
        "getValue": () => Promise<string>;
        "selected": boolean;
        "value": string;
    }
    interface UiInputRadio {
        "orientation": UiOrientation;
    }
    interface UiInputText {
    }
    interface UiLayout {
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "align": UiAlign;
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Elevation from the page by adding a border
         */
        "elevation": UiElevation;
        /**
          * @description Amount of gap between the row items or column items;
         */
        "gap": UiSize;
        /**
          * @description Max width of the column or row, should really only be used on a column type layout.  any CSS unit of measurement can be used.
         */
        "height": string;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "justify": UiAlign;
        "margin": string;
        "padding": string;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
        /**
          * @description Layout type, default is "row" can also be "column"
         */
        "type": UiLayoutType;
        /**
          * @description Max width of the column or row, should really only be used on a column type layout.  any CSS unit of measurement can be used.
         */
        "width": string;
    }
    interface UiModal {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Block background user input them modal is open.
         */
        "block": boolean;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Elevation from the page by adding a border
         */
        "elevation": UiElevation;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
    interface UiModalBlock {
        "active": boolean;
    }
    interface UiModalBody {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Amount of gap between the row items or column items;
         */
        "gap": UiSize;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
    interface UiModalFooter {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Amount of gap between the row items or column items;
         */
        "gap": UiSize;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "justify": UiAlign;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
    interface UiModalHeader {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
    interface UiModalTest {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
    interface UiParagraph {
        /**
          * Background color from the UI Color Palette
         */
        "background": UiColor;
        /**
          * Forground color from the UI Color Palette
         */
        "color": UiColor;
        /**
          * Absolute font size
         */
        "size": UiSize;
    }
    interface UiPlayground {
        "tag": string;
    }
    interface UiPlaygroundAttrs {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        "docs": Array<JsonDocsComponent>;
        "elements": Array<HTMLElement>;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
    interface UiPlaygroundValues {
        "prop": JsonDocsProp;
    }
    interface UiRipple {
        "toggle": (e: CustomEvent) => Promise<void>;
    }
    interface UiRow {
        /**
          * @description Defines how each line is aligned within a flexbox/grid container.  It only applies if flex-wrap: wrap is present, and if there are multiple lines  of flexbox/grid items.
         */
        "alignContent": UiAlign;
        /**
          * @description Defines how flexbox items are aligned according to the cross axis, within a line  of a flexbox container.
         */
        "alignItems": UiAlign;
        /**
          * @description Defines how flexbox items are aligned according to the cross axis, within a line  of a flexbox container.
         */
        "alignSelf": UiAlign;
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Amount of gap between the row items or column items;
         */
        "flex": string;
        /**
          * @description Flex box flex, how much to streatch
         */
        "gap": string;
        /**
          * @description Defines how each line is aligned within a flexbox/grid container. It only applies  if flex-wrap: wrap is present, and if there are multiple lines of  flexbox/grid items.
         */
        "justifyContent": UiAlign;
        /**
          * @description Flex box flex, how much to streatch
         */
        "margin": string;
        /**
          * @description Flex box flex, how much to streatch
         */
        "padding": string;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
    interface UiTable {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
    interface UiTableBody {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Hover effect on row hover.
         */
        "hover": boolean;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
        /**
          * @description Stripe "odd" or "even" rows, if not present then no stripe
         */
        "stripe": 'odd' | 'even' | 'none';
    }
    interface UiTableCell {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
    interface UiTableHead {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
    interface UiTableRow {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
    interface UiText {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background": UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color": UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size": UiSize;
    }
}
declare global {
    interface HTMLUiAppElement extends Components.UiApp, HTMLStencilElement {
    }
    var HTMLUiAppElement: {
        prototype: HTMLUiAppElement;
        new (): HTMLUiAppElement;
    };
    interface HTMLUiAppBodyElement extends Components.UiAppBody, HTMLStencilElement {
    }
    var HTMLUiAppBodyElement: {
        prototype: HTMLUiAppBodyElement;
        new (): HTMLUiAppBodyElement;
    };
    interface HTMLUiAppHeaderElement extends Components.UiAppHeader, HTMLStencilElement {
    }
    var HTMLUiAppHeaderElement: {
        prototype: HTMLUiAppHeaderElement;
        new (): HTMLUiAppHeaderElement;
    };
    interface HTMLUiAppNavigationElement extends Components.UiAppNavigation, HTMLStencilElement {
    }
    var HTMLUiAppNavigationElement: {
        prototype: HTMLUiAppNavigationElement;
        new (): HTMLUiAppNavigationElement;
    };
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiCodeElement extends Components.UiCode, HTMLStencilElement {
    }
    var HTMLUiCodeElement: {
        prototype: HTMLUiCodeElement;
        new (): HTMLUiCodeElement;
    };
    interface HTMLUiColumnElement extends Components.UiColumn, HTMLStencilElement {
    }
    var HTMLUiColumnElement: {
        prototype: HTMLUiColumnElement;
        new (): HTMLUiColumnElement;
    };
    interface HTMLUiDocLinksElement extends Components.UiDocLinks, HTMLStencilElement {
    }
    var HTMLUiDocLinksElement: {
        prototype: HTMLUiDocLinksElement;
        new (): HTMLUiDocLinksElement;
    };
    interface HTMLUiGridElement extends Components.UiGrid, HTMLStencilElement {
    }
    var HTMLUiGridElement: {
        prototype: HTMLUiGridElement;
        new (): HTMLUiGridElement;
    };
    interface HTMLUiHeadingElement extends Components.UiHeading, HTMLStencilElement {
    }
    var HTMLUiHeadingElement: {
        prototype: HTMLUiHeadingElement;
        new (): HTMLUiHeadingElement;
    };
    interface HTMLUiIconElement extends Components.UiIcon, HTMLStencilElement {
    }
    var HTMLUiIconElement: {
        prototype: HTMLUiIconElement;
        new (): HTMLUiIconElement;
    };
    interface HTMLUiInputElement extends Components.UiInput, HTMLStencilElement {
    }
    var HTMLUiInputElement: {
        prototype: HTMLUiInputElement;
        new (): HTMLUiInputElement;
    };
    interface HTMLUiInputColorElement extends Components.UiInputColor, HTMLStencilElement {
    }
    var HTMLUiInputColorElement: {
        prototype: HTMLUiInputColorElement;
        new (): HTMLUiInputColorElement;
    };
    interface HTMLUiInputOptionElement extends Components.UiInputOption, HTMLStencilElement {
    }
    var HTMLUiInputOptionElement: {
        prototype: HTMLUiInputOptionElement;
        new (): HTMLUiInputOptionElement;
    };
    interface HTMLUiInputRadioElement extends Components.UiInputRadio, HTMLStencilElement {
    }
    var HTMLUiInputRadioElement: {
        prototype: HTMLUiInputRadioElement;
        new (): HTMLUiInputRadioElement;
    };
    interface HTMLUiInputTextElement extends Components.UiInputText, HTMLStencilElement {
    }
    var HTMLUiInputTextElement: {
        prototype: HTMLUiInputTextElement;
        new (): HTMLUiInputTextElement;
    };
    interface HTMLUiLayoutElement extends Components.UiLayout, HTMLStencilElement {
    }
    var HTMLUiLayoutElement: {
        prototype: HTMLUiLayoutElement;
        new (): HTMLUiLayoutElement;
    };
    interface HTMLUiModalElement extends Components.UiModal, HTMLStencilElement {
    }
    var HTMLUiModalElement: {
        prototype: HTMLUiModalElement;
        new (): HTMLUiModalElement;
    };
    interface HTMLUiModalBlockElement extends Components.UiModalBlock, HTMLStencilElement {
    }
    var HTMLUiModalBlockElement: {
        prototype: HTMLUiModalBlockElement;
        new (): HTMLUiModalBlockElement;
    };
    interface HTMLUiModalBodyElement extends Components.UiModalBody, HTMLStencilElement {
    }
    var HTMLUiModalBodyElement: {
        prototype: HTMLUiModalBodyElement;
        new (): HTMLUiModalBodyElement;
    };
    interface HTMLUiModalFooterElement extends Components.UiModalFooter, HTMLStencilElement {
    }
    var HTMLUiModalFooterElement: {
        prototype: HTMLUiModalFooterElement;
        new (): HTMLUiModalFooterElement;
    };
    interface HTMLUiModalHeaderElement extends Components.UiModalHeader, HTMLStencilElement {
    }
    var HTMLUiModalHeaderElement: {
        prototype: HTMLUiModalHeaderElement;
        new (): HTMLUiModalHeaderElement;
    };
    interface HTMLUiModalTestElement extends Components.UiModalTest, HTMLStencilElement {
    }
    var HTMLUiModalTestElement: {
        prototype: HTMLUiModalTestElement;
        new (): HTMLUiModalTestElement;
    };
    interface HTMLUiParagraphElement extends Components.UiParagraph, HTMLStencilElement {
    }
    var HTMLUiParagraphElement: {
        prototype: HTMLUiParagraphElement;
        new (): HTMLUiParagraphElement;
    };
    interface HTMLUiPlaygroundElement extends Components.UiPlayground, HTMLStencilElement {
    }
    var HTMLUiPlaygroundElement: {
        prototype: HTMLUiPlaygroundElement;
        new (): HTMLUiPlaygroundElement;
    };
    interface HTMLUiPlaygroundAttrsElement extends Components.UiPlaygroundAttrs, HTMLStencilElement {
    }
    var HTMLUiPlaygroundAttrsElement: {
        prototype: HTMLUiPlaygroundAttrsElement;
        new (): HTMLUiPlaygroundAttrsElement;
    };
    interface HTMLUiPlaygroundValuesElement extends Components.UiPlaygroundValues, HTMLStencilElement {
    }
    var HTMLUiPlaygroundValuesElement: {
        prototype: HTMLUiPlaygroundValuesElement;
        new (): HTMLUiPlaygroundValuesElement;
    };
    interface HTMLUiRippleElement extends Components.UiRipple, HTMLStencilElement {
    }
    var HTMLUiRippleElement: {
        prototype: HTMLUiRippleElement;
        new (): HTMLUiRippleElement;
    };
    interface HTMLUiRowElement extends Components.UiRow, HTMLStencilElement {
    }
    var HTMLUiRowElement: {
        prototype: HTMLUiRowElement;
        new (): HTMLUiRowElement;
    };
    interface HTMLUiTableElement extends Components.UiTable, HTMLStencilElement {
    }
    var HTMLUiTableElement: {
        prototype: HTMLUiTableElement;
        new (): HTMLUiTableElement;
    };
    interface HTMLUiTableBodyElement extends Components.UiTableBody, HTMLStencilElement {
    }
    var HTMLUiTableBodyElement: {
        prototype: HTMLUiTableBodyElement;
        new (): HTMLUiTableBodyElement;
    };
    interface HTMLUiTableCellElement extends Components.UiTableCell, HTMLStencilElement {
    }
    var HTMLUiTableCellElement: {
        prototype: HTMLUiTableCellElement;
        new (): HTMLUiTableCellElement;
    };
    interface HTMLUiTableHeadElement extends Components.UiTableHead, HTMLStencilElement {
    }
    var HTMLUiTableHeadElement: {
        prototype: HTMLUiTableHeadElement;
        new (): HTMLUiTableHeadElement;
    };
    interface HTMLUiTableRowElement extends Components.UiTableRow, HTMLStencilElement {
    }
    var HTMLUiTableRowElement: {
        prototype: HTMLUiTableRowElement;
        new (): HTMLUiTableRowElement;
    };
    interface HTMLUiTextElement extends Components.UiText, HTMLStencilElement {
    }
    var HTMLUiTextElement: {
        prototype: HTMLUiTextElement;
        new (): HTMLUiTextElement;
    };
    interface HTMLElementTagNameMap {
        "ui-app": HTMLUiAppElement;
        "ui-app-body": HTMLUiAppBodyElement;
        "ui-app-header": HTMLUiAppHeaderElement;
        "ui-app-navigation": HTMLUiAppNavigationElement;
        "ui-button": HTMLUiButtonElement;
        "ui-code": HTMLUiCodeElement;
        "ui-column": HTMLUiColumnElement;
        "ui-doc-links": HTMLUiDocLinksElement;
        "ui-grid": HTMLUiGridElement;
        "ui-heading": HTMLUiHeadingElement;
        "ui-icon": HTMLUiIconElement;
        "ui-input": HTMLUiInputElement;
        "ui-input-color": HTMLUiInputColorElement;
        "ui-input-option": HTMLUiInputOptionElement;
        "ui-input-radio": HTMLUiInputRadioElement;
        "ui-input-text": HTMLUiInputTextElement;
        "ui-layout": HTMLUiLayoutElement;
        "ui-modal": HTMLUiModalElement;
        "ui-modal-block": HTMLUiModalBlockElement;
        "ui-modal-body": HTMLUiModalBodyElement;
        "ui-modal-footer": HTMLUiModalFooterElement;
        "ui-modal-header": HTMLUiModalHeaderElement;
        "ui-modal-test": HTMLUiModalTestElement;
        "ui-paragraph": HTMLUiParagraphElement;
        "ui-playground": HTMLUiPlaygroundElement;
        "ui-playground-attrs": HTMLUiPlaygroundAttrsElement;
        "ui-playground-values": HTMLUiPlaygroundValuesElement;
        "ui-ripple": HTMLUiRippleElement;
        "ui-row": HTMLUiRowElement;
        "ui-table": HTMLUiTableElement;
        "ui-table-body": HTMLUiTableBodyElement;
        "ui-table-cell": HTMLUiTableCellElement;
        "ui-table-head": HTMLUiTableHeadElement;
        "ui-table-row": HTMLUiTableRowElement;
        "ui-text": HTMLUiTextElement;
    }
}
declare namespace LocalJSX {
    interface UiApp {
        /**
          * Background color from the UI Color Palette
         */
        "background"?: UiColor;
        /**
          * Forground color from the UI Color Palette
         */
        "color"?: UiColor;
        /**
          * Absolute font size
         */
        "size"?: UiSize;
    }
    interface UiAppBody {
        /**
          * Background color from the UI Color Palette
         */
        "background"?: UiColor;
        /**
          * Forground color from the UI Color Palette
         */
        "color"?: UiColor;
        /**
          * Absolute font size
         */
        "size"?: UiSize;
    }
    interface UiAppHeader {
        /**
          * Background color from the UI Color Palette
         */
        "background"?: UiColor;
        /**
          * Forground color from the UI Color Palette
         */
        "color"?: UiColor;
        /**
          * Absolute font size
         */
        "size"?: UiSize;
        "src"?: string;
    }
    interface UiAppNavigation {
        /**
          * Background color from the UI Color Palette
         */
        "background"?: UiColor;
        /**
          * Forground color from the UI Color Palette
         */
        "color"?: UiColor;
        /**
          * Absolute font size
         */
        "size"?: UiSize;
    }
    interface UiButton {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description This Boolean attribute prevents the user from interacting with the ui-button.
         */
        "disabled"?: boolean;
        /**
          * @description URL where browser will navigate to once button is clicked. If href is provided then a click event will not be emitted and page will be redirect to the provided url.
         */
        "href"?: string;
        "onUiClick"?: (event: CustomEvent<any>) => void;
        /**
          * @description Rounding button corners. <ul>    <li> Base : Adds slight corner rounding</li>    <li> fab : Intending to creating single icon round button</li>    <li> none : No rounding</li>    <li> pill : same rounding as fab except has more padding to left and right</li> </ul>
         */
        "round"?: UiRounding;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
        /**
          * @description Set button type from supported button types.
         */
        "type"?: UiButtonType;
    }
    interface UiCode {
        "language"?: 'xml' | 'java' | 'javascript' | 'typescript' | 'sql';
    }
    interface UiColumn {
        /**
          * @description Defines how each line is aligned within a flexbox/grid container.  It only applies if flex-wrap: wrap is present, and if there are multiple lines  of flexbox/grid items.
         */
        "alignContent"?: UiAlign;
        /**
          * @description Defines how flexbox items are aligned according to the cross axis, within a line  of a flexbox container.
         */
        "alignItems"?: UiAlign;
        /**
          * @description Defines how flexbox items are aligned according to the cross axis, within a line  of a flexbox container.
         */
        "alignSelf"?: UiAlign;
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Flex box flex, how much to streatch
         */
        "flex"?: string;
        /**
          * @description Flex box flex, how much to streatch
         */
        "gap"?: string;
        /**
          * @description Defines how each line is aligned within a flexbox/grid container. It only applies  if flex-wrap: wrap is present, and if there are multiple lines of  flexbox/grid items.
         */
        "justifyContent"?: UiAlign;
        /**
          * @description Flex box flex, how much to streatch
         */
        "margin"?: string;
        /**
          * @description Flex box flex, how much to streatch
         */
        "padding"?: string;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface UiDocLinks {
    }
    interface UiGrid {
        /**
          * @description Defines how each line is aligned within a flexbox/grid container.  It only applies if flex-wrap: wrap is present, and if there are multiple lines  of flexbox/grid items.
         */
        "alignContent"?: UiAlign;
        /**
          * @description Defines how flexbox items are aligned according to the cross axis, within a line  of a flexbox container.
         */
        "alignItems"?: UiAlign;
        /**
          * @description Defines how flexbox items are aligned according to the cross axis, within a line  of a flexbox container.
         */
        "alignSelf"?: UiAlign;
        /**
          * @description Gap between each item of the grid
         */
        "autoFill"?: boolean;
        /**
          * @description Gap between each item of the grid
         */
        "autoFit"?: boolean;
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Amount of gap between the row items or column items;
         */
        "flex"?: string;
        /**
          * @description Gap between each item of the grid
         */
        "gap"?: string;
        /**
          * @description Defines how each line is aligned within a flexbox/grid container. It only applies  if flex-wrap: wrap is present, and if there are multiple lines of  flexbox/grid items.
         */
        "justifyContent"?: UiAlign;
        /**
          * @description Flex box flex, how much to streatch
         */
        "margin"?: string;
        /**
          * @description Flex box flex, how much to streatch
         */
        "padding"?: string;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
        /**
          * @description Gap between each item of the grid
         */
        "width"?: string;
    }
    interface UiHeading {
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "align"?: UiAlign;
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
        /**
          * @description Type provide two additional feature where heading can be underlined (bottom border) or outline which gives border around the heading.
         */
        "type"?: "underline" | "outline" | "base";
    }
    interface UiIcon {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Material design icons are used as part of this framework. Name of the icon can be between the tag or it can be sent in as an attribute. For example as attribute &lt;ui-icon icon="apps"&gt;&lt;/ui-icon&gt; or &lt;ui-icon&gt;apps&lt;/ui-icon&gt; In addition to this svg of an icon can be placed within the icon tag to create an svg icon.   <pre><ui-text color="danger">* CLICK NAME TO COPY TO CLIPBOARD * </ui-text></pre>
         */
        "icon"?: UiIcons;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface UiInput {
        /**
          * @description Background color from the UI Color Palette
         */
        "background"?: UiColor;
        /**
          * @description Forground color from the UI Color Palette
         */
        "color"?: UiColor;
        "onUiInput"?: (event: CustomEvent<any>) => void;
        /**
          * @description Type of input being requested
         */
        "orientation"?: UiOrientation;
        /**
          * @description Absolute font size
         */
        "size"?: UiSize;
        /**
          * @description Type of input being requested
         */
        "type"?: UiInputType;
        "value"?: any;
    }
    interface UiInputColor {
        "onUiInputEvent"?: (event: CustomEvent<any>) => void;
    }
    interface UiInputOption {
        "onUiInputOptionEvent"?: (event: CustomEvent<any>) => void;
        "selected"?: boolean;
        "value"?: string;
    }
    interface UiInputRadio {
        "orientation"?: UiOrientation;
    }
    interface UiInputText {
    }
    interface UiLayout {
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "align"?: UiAlign;
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Elevation from the page by adding a border
         */
        "elevation"?: UiElevation;
        /**
          * @description Amount of gap between the row items or column items;
         */
        "gap"?: UiSize;
        /**
          * @description Max width of the column or row, should really only be used on a column type layout.  any CSS unit of measurement can be used.
         */
        "height"?: string;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "justify"?: UiAlign;
        "margin"?: string;
        "padding"?: string;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
        /**
          * @description Layout type, default is "row" can also be "column"
         */
        "type"?: UiLayoutType;
        /**
          * @description Max width of the column or row, should really only be used on a column type layout.  any CSS unit of measurement can be used.
         */
        "width"?: string;
    }
    interface UiModal {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Block background user input them modal is open.
         */
        "block"?: boolean;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Elevation from the page by adding a border
         */
        "elevation"?: UiElevation;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface UiModalBlock {
        "active"?: boolean;
    }
    interface UiModalBody {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Amount of gap between the row items or column items;
         */
        "gap"?: UiSize;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface UiModalFooter {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Amount of gap between the row items or column items;
         */
        "gap"?: UiSize;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "justify"?: UiAlign;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface UiModalHeader {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface UiModalTest {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface UiParagraph {
        /**
          * Background color from the UI Color Palette
         */
        "background"?: UiColor;
        /**
          * Forground color from the UI Color Palette
         */
        "color"?: UiColor;
        /**
          * Absolute font size
         */
        "size"?: UiSize;
    }
    interface UiPlayground {
        "tag"?: string;
    }
    interface UiPlaygroundAttrs {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        "docs"?: Array<JsonDocsComponent>;
        "elements"?: Array<HTMLElement>;
        "onUpdatePlaygroundCode"?: (event: CustomEvent<any>) => void;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface UiPlaygroundValues {
        "prop"?: JsonDocsProp;
    }
    interface UiRipple {
    }
    interface UiRow {
        /**
          * @description Defines how each line is aligned within a flexbox/grid container.  It only applies if flex-wrap: wrap is present, and if there are multiple lines  of flexbox/grid items.
         */
        "alignContent"?: UiAlign;
        /**
          * @description Defines how flexbox items are aligned according to the cross axis, within a line  of a flexbox container.
         */
        "alignItems"?: UiAlign;
        /**
          * @description Defines how flexbox items are aligned according to the cross axis, within a line  of a flexbox container.
         */
        "alignSelf"?: UiAlign;
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Amount of gap between the row items or column items;
         */
        "flex"?: string;
        /**
          * @description Flex box flex, how much to streatch
         */
        "gap"?: string;
        /**
          * @description Defines how each line is aligned within a flexbox/grid container. It only applies  if flex-wrap: wrap is present, and if there are multiple lines of  flexbox/grid items.
         */
        "justifyContent"?: UiAlign;
        /**
          * @description Flex box flex, how much to streatch
         */
        "margin"?: string;
        /**
          * @description Flex box flex, how much to streatch
         */
        "padding"?: string;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface UiTable {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface UiTableBody {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Hover effect on row hover.
         */
        "hover"?: boolean;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
        /**
          * @description Stripe "odd" or "even" rows, if not present then no stripe
         */
        "stripe"?: 'odd' | 'even' | 'none';
    }
    interface UiTableCell {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface UiTableHead {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface UiTableRow {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface UiText {
        /**
          * @description Background color from the UI Color Palette. When only background is present then background will be color and forground will be either white or black. If color attribute is also present then forground color will be set to color attribute.
         */
        "background"?: UiColor;
        /**
          * @description Set forground color to selected palette color.
         */
        "color"?: UiColor;
        /**
          * @description Absolute-size keywords, based on the user's default font size (which is medium).
         */
        "size"?: UiSize;
    }
    interface IntrinsicElements {
        "ui-app": UiApp;
        "ui-app-body": UiAppBody;
        "ui-app-header": UiAppHeader;
        "ui-app-navigation": UiAppNavigation;
        "ui-button": UiButton;
        "ui-code": UiCode;
        "ui-column": UiColumn;
        "ui-doc-links": UiDocLinks;
        "ui-grid": UiGrid;
        "ui-heading": UiHeading;
        "ui-icon": UiIcon;
        "ui-input": UiInput;
        "ui-input-color": UiInputColor;
        "ui-input-option": UiInputOption;
        "ui-input-radio": UiInputRadio;
        "ui-input-text": UiInputText;
        "ui-layout": UiLayout;
        "ui-modal": UiModal;
        "ui-modal-block": UiModalBlock;
        "ui-modal-body": UiModalBody;
        "ui-modal-footer": UiModalFooter;
        "ui-modal-header": UiModalHeader;
        "ui-modal-test": UiModalTest;
        "ui-paragraph": UiParagraph;
        "ui-playground": UiPlayground;
        "ui-playground-attrs": UiPlaygroundAttrs;
        "ui-playground-values": UiPlaygroundValues;
        "ui-ripple": UiRipple;
        "ui-row": UiRow;
        "ui-table": UiTable;
        "ui-table-body": UiTableBody;
        "ui-table-cell": UiTableCell;
        "ui-table-head": UiTableHead;
        "ui-table-row": UiTableRow;
        "ui-text": UiText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-app": LocalJSX.UiApp & JSXBase.HTMLAttributes<HTMLUiAppElement>;
            "ui-app-body": LocalJSX.UiAppBody & JSXBase.HTMLAttributes<HTMLUiAppBodyElement>;
            "ui-app-header": LocalJSX.UiAppHeader & JSXBase.HTMLAttributes<HTMLUiAppHeaderElement>;
            "ui-app-navigation": LocalJSX.UiAppNavigation & JSXBase.HTMLAttributes<HTMLUiAppNavigationElement>;
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-code": LocalJSX.UiCode & JSXBase.HTMLAttributes<HTMLUiCodeElement>;
            "ui-column": LocalJSX.UiColumn & JSXBase.HTMLAttributes<HTMLUiColumnElement>;
            "ui-doc-links": LocalJSX.UiDocLinks & JSXBase.HTMLAttributes<HTMLUiDocLinksElement>;
            "ui-grid": LocalJSX.UiGrid & JSXBase.HTMLAttributes<HTMLUiGridElement>;
            "ui-heading": LocalJSX.UiHeading & JSXBase.HTMLAttributes<HTMLUiHeadingElement>;
            "ui-icon": LocalJSX.UiIcon & JSXBase.HTMLAttributes<HTMLUiIconElement>;
            "ui-input": LocalJSX.UiInput & JSXBase.HTMLAttributes<HTMLUiInputElement>;
            "ui-input-color": LocalJSX.UiInputColor & JSXBase.HTMLAttributes<HTMLUiInputColorElement>;
            "ui-input-option": LocalJSX.UiInputOption & JSXBase.HTMLAttributes<HTMLUiInputOptionElement>;
            "ui-input-radio": LocalJSX.UiInputRadio & JSXBase.HTMLAttributes<HTMLUiInputRadioElement>;
            "ui-input-text": LocalJSX.UiInputText & JSXBase.HTMLAttributes<HTMLUiInputTextElement>;
            "ui-layout": LocalJSX.UiLayout & JSXBase.HTMLAttributes<HTMLUiLayoutElement>;
            "ui-modal": LocalJSX.UiModal & JSXBase.HTMLAttributes<HTMLUiModalElement>;
            "ui-modal-block": LocalJSX.UiModalBlock & JSXBase.HTMLAttributes<HTMLUiModalBlockElement>;
            "ui-modal-body": LocalJSX.UiModalBody & JSXBase.HTMLAttributes<HTMLUiModalBodyElement>;
            "ui-modal-footer": LocalJSX.UiModalFooter & JSXBase.HTMLAttributes<HTMLUiModalFooterElement>;
            "ui-modal-header": LocalJSX.UiModalHeader & JSXBase.HTMLAttributes<HTMLUiModalHeaderElement>;
            "ui-modal-test": LocalJSX.UiModalTest & JSXBase.HTMLAttributes<HTMLUiModalTestElement>;
            "ui-paragraph": LocalJSX.UiParagraph & JSXBase.HTMLAttributes<HTMLUiParagraphElement>;
            "ui-playground": LocalJSX.UiPlayground & JSXBase.HTMLAttributes<HTMLUiPlaygroundElement>;
            "ui-playground-attrs": LocalJSX.UiPlaygroundAttrs & JSXBase.HTMLAttributes<HTMLUiPlaygroundAttrsElement>;
            "ui-playground-values": LocalJSX.UiPlaygroundValues & JSXBase.HTMLAttributes<HTMLUiPlaygroundValuesElement>;
            "ui-ripple": LocalJSX.UiRipple & JSXBase.HTMLAttributes<HTMLUiRippleElement>;
            "ui-row": LocalJSX.UiRow & JSXBase.HTMLAttributes<HTMLUiRowElement>;
            "ui-table": LocalJSX.UiTable & JSXBase.HTMLAttributes<HTMLUiTableElement>;
            "ui-table-body": LocalJSX.UiTableBody & JSXBase.HTMLAttributes<HTMLUiTableBodyElement>;
            "ui-table-cell": LocalJSX.UiTableCell & JSXBase.HTMLAttributes<HTMLUiTableCellElement>;
            "ui-table-head": LocalJSX.UiTableHead & JSXBase.HTMLAttributes<HTMLUiTableHeadElement>;
            "ui-table-row": LocalJSX.UiTableRow & JSXBase.HTMLAttributes<HTMLUiTableRowElement>;
            "ui-text": LocalJSX.UiText & JSXBase.HTMLAttributes<HTMLUiTextElement>;
        }
    }
}
