/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  UiButtonType,
  UiColor,
  UiRounding,
  UiSize,
} from './utils/ui-types';
import {
  JsonDocsComponent,
} from './components/ui-playground/doc';

export namespace Components {
  interface UiApp {
    /**
    * Background color from the UI Color Palette
    */
    'background': UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color': UiColor;
    /**
    * Absolute font size
    */
    'size': UiSize;
  }
  interface UiAppBody {
    /**
    * Background color from the UI Color Palette
    */
    'background': UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color': UiColor;
    /**
    * Absolute font size
    */
    'size': UiSize;
  }
  interface UiAppHeader {
    /**
    * Background color from the UI Color Palette
    */
    'background': UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color': UiColor;
    /**
    * Absolute font size
    */
    'size': UiSize;
    'src': string;
  }
  interface UiAppNavigation {
    /**
    * Background color from the UI Color Palette
    */
    'background': UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color': UiColor;
    /**
    * Absolute font size
    */
    'size': UiSize;
    'toggle': () => Promise<void>;
  }
  interface UiButton {
    /**
    * @description Background color from the UI Color Palette
    */
    'background': UiColor;
    /**
    * @description Forground color from the UI Color Palette
    */
    'color': UiColor;
    /**
    * @description Enable or disable button
    */
    'disabled': boolean;
    /**
    * @description Enable or disable button
    */
    'round': UiRounding;
    /**
    * @description Absolute font size
    */
    'size': UiSize;
    /**
    * @description Set button type from supported button types
    */
    'type': UiButtonType;
  }
  interface UiHeading {
    /**
    * Background color from the UI Color Palette
    */
    'background': UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color': UiColor;
    /**
    * Absolute font size
    */
    'size': UiSize;
  }
  interface UiIcon {
    /**
    * Background color from the UI Color Palette
    */
    'background': UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color': UiColor;
    /**
    * Absolute font size
    */
    'size': UiSize;
  }
  interface UiParagraph {
    /**
    * Background color from the UI Color Palette
    */
    'background': UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color': UiColor;
    /**
    * Absolute font size
    */
    'size': UiSize;
  }
  interface UiPlayground {
    'tag': string;
  }
  interface UiPlaygroundAttrs {
    'doc': JsonDocsComponent;
    'element': HTMLElement;
  }
  interface UiRipple {
    'toggle': (e: CustomEvent<any>) => Promise<void>;
  }
}

declare global {


  interface HTMLUiAppElement extends Components.UiApp, HTMLStencilElement {}
  var HTMLUiAppElement: {
    prototype: HTMLUiAppElement;
    new (): HTMLUiAppElement;
  };

  interface HTMLUiAppBodyElement extends Components.UiAppBody, HTMLStencilElement {}
  var HTMLUiAppBodyElement: {
    prototype: HTMLUiAppBodyElement;
    new (): HTMLUiAppBodyElement;
  };

  interface HTMLUiAppHeaderElement extends Components.UiAppHeader, HTMLStencilElement {}
  var HTMLUiAppHeaderElement: {
    prototype: HTMLUiAppHeaderElement;
    new (): HTMLUiAppHeaderElement;
  };

  interface HTMLUiAppNavigationElement extends Components.UiAppNavigation, HTMLStencilElement {}
  var HTMLUiAppNavigationElement: {
    prototype: HTMLUiAppNavigationElement;
    new (): HTMLUiAppNavigationElement;
  };

  interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {}
  var HTMLUiButtonElement: {
    prototype: HTMLUiButtonElement;
    new (): HTMLUiButtonElement;
  };

  interface HTMLUiHeadingElement extends Components.UiHeading, HTMLStencilElement {}
  var HTMLUiHeadingElement: {
    prototype: HTMLUiHeadingElement;
    new (): HTMLUiHeadingElement;
  };

  interface HTMLUiIconElement extends Components.UiIcon, HTMLStencilElement {}
  var HTMLUiIconElement: {
    prototype: HTMLUiIconElement;
    new (): HTMLUiIconElement;
  };

  interface HTMLUiParagraphElement extends Components.UiParagraph, HTMLStencilElement {}
  var HTMLUiParagraphElement: {
    prototype: HTMLUiParagraphElement;
    new (): HTMLUiParagraphElement;
  };

  interface HTMLUiPlaygroundElement extends Components.UiPlayground, HTMLStencilElement {}
  var HTMLUiPlaygroundElement: {
    prototype: HTMLUiPlaygroundElement;
    new (): HTMLUiPlaygroundElement;
  };

  interface HTMLUiPlaygroundAttrsElement extends Components.UiPlaygroundAttrs, HTMLStencilElement {}
  var HTMLUiPlaygroundAttrsElement: {
    prototype: HTMLUiPlaygroundAttrsElement;
    new (): HTMLUiPlaygroundAttrsElement;
  };

  interface HTMLUiRippleElement extends Components.UiRipple, HTMLStencilElement {}
  var HTMLUiRippleElement: {
    prototype: HTMLUiRippleElement;
    new (): HTMLUiRippleElement;
  };
  interface HTMLElementTagNameMap {
    'ui-app': HTMLUiAppElement;
    'ui-app-body': HTMLUiAppBodyElement;
    'ui-app-header': HTMLUiAppHeaderElement;
    'ui-app-navigation': HTMLUiAppNavigationElement;
    'ui-button': HTMLUiButtonElement;
    'ui-heading': HTMLUiHeadingElement;
    'ui-icon': HTMLUiIconElement;
    'ui-paragraph': HTMLUiParagraphElement;
    'ui-playground': HTMLUiPlaygroundElement;
    'ui-playground-attrs': HTMLUiPlaygroundAttrsElement;
    'ui-ripple': HTMLUiRippleElement;
  }
}

declare namespace LocalJSX {
  interface UiApp {
    /**
    * Background color from the UI Color Palette
    */
    'background'?: UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color'?: UiColor;
    /**
    * Absolute font size
    */
    'size'?: UiSize;
  }
  interface UiAppBody {
    /**
    * Background color from the UI Color Palette
    */
    'background'?: UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color'?: UiColor;
    /**
    * Absolute font size
    */
    'size'?: UiSize;
  }
  interface UiAppHeader {
    /**
    * Background color from the UI Color Palette
    */
    'background'?: UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color'?: UiColor;
    /**
    * Absolute font size
    */
    'size'?: UiSize;
    'src'?: string;
  }
  interface UiAppNavigation {
    /**
    * Background color from the UI Color Palette
    */
    'background'?: UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color'?: UiColor;
    /**
    * Absolute font size
    */
    'size'?: UiSize;
  }
  interface UiButton {
    /**
    * @description Background color from the UI Color Palette
    */
    'background'?: UiColor;
    /**
    * @description Forground color from the UI Color Palette
    */
    'color'?: UiColor;
    /**
    * @description Enable or disable button
    */
    'disabled'?: boolean;
    'onUiClick'?: (event: CustomEvent<any>) => void;
    /**
    * @description Enable or disable button
    */
    'round'?: UiRounding;
    /**
    * @description Absolute font size
    */
    'size'?: UiSize;
    /**
    * @description Set button type from supported button types
    */
    'type'?: UiButtonType;
  }
  interface UiHeading {
    /**
    * Background color from the UI Color Palette
    */
    'background'?: UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color'?: UiColor;
    /**
    * Absolute font size
    */
    'size'?: UiSize;
  }
  interface UiIcon {
    /**
    * Background color from the UI Color Palette
    */
    'background'?: UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color'?: UiColor;
    /**
    * Absolute font size
    */
    'size'?: UiSize;
  }
  interface UiParagraph {
    /**
    * Background color from the UI Color Palette
    */
    'background'?: UiColor;
    /**
    * Forground color from the UI Color Palette
    */
    'color'?: UiColor;
    /**
    * Absolute font size
    */
    'size'?: UiSize;
  }
  interface UiPlayground {
    'tag'?: string;
  }
  interface UiPlaygroundAttrs {
    'doc'?: JsonDocsComponent;
    'element'?: HTMLElement;
  }
  interface UiRipple {}

  interface IntrinsicElements {
    'ui-app': UiApp;
    'ui-app-body': UiAppBody;
    'ui-app-header': UiAppHeader;
    'ui-app-navigation': UiAppNavigation;
    'ui-button': UiButton;
    'ui-heading': UiHeading;
    'ui-icon': UiIcon;
    'ui-paragraph': UiParagraph;
    'ui-playground': UiPlayground;
    'ui-playground-attrs': UiPlaygroundAttrs;
    'ui-ripple': UiRipple;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'ui-app': LocalJSX.UiApp & JSXBase.HTMLAttributes<HTMLUiAppElement>;
      'ui-app-body': LocalJSX.UiAppBody & JSXBase.HTMLAttributes<HTMLUiAppBodyElement>;
      'ui-app-header': LocalJSX.UiAppHeader & JSXBase.HTMLAttributes<HTMLUiAppHeaderElement>;
      'ui-app-navigation': LocalJSX.UiAppNavigation & JSXBase.HTMLAttributes<HTMLUiAppNavigationElement>;
      'ui-button': LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
      'ui-heading': LocalJSX.UiHeading & JSXBase.HTMLAttributes<HTMLUiHeadingElement>;
      'ui-icon': LocalJSX.UiIcon & JSXBase.HTMLAttributes<HTMLUiIconElement>;
      'ui-paragraph': LocalJSX.UiParagraph & JSXBase.HTMLAttributes<HTMLUiParagraphElement>;
      'ui-playground': LocalJSX.UiPlayground & JSXBase.HTMLAttributes<HTMLUiPlaygroundElement>;
      'ui-playground-attrs': LocalJSX.UiPlaygroundAttrs & JSXBase.HTMLAttributes<HTMLUiPlaygroundAttrsElement>;
      'ui-ripple': LocalJSX.UiRipple & JSXBase.HTMLAttributes<HTMLUiRippleElement>;
    }
  }
}


